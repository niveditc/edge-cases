#!/usr/bin/python

# Get the processed data to perform analyses on
from process_data import parse_records
records = parse_records()

state_map = {
  '100000000000000000000000000000000000' : 'A',
  '110000000000000000000000000000000000' : 'B',
  '111000000000000000000000000000000000' : 'C',
  '111100110111011011111010000000000111' : 'D',
  '111100110111011011111011000000000111' : 'E',
  '111100110111011011111011110000000111' : 'F',
  '111100110111111011111110000000000111' : 'G',
  '111100110111111011111111110000000111' : 'H',
  '111100111111011111111011111000000111' : 'I',
  '111111110111111011111111110000011111' : 'J',
  '111111111111011111111010000000001111' : 'K',
  '111111111111011111111010000000011111' : 'L',
  '111111111111111111111110000000011111' : 'M',
  '111111001000000100000000000000011111' : 'N',
  '111111111111111111111111000001111111' : 'O',
  '111111111111111111111111000000011111' : 'P',
  '111111111111011111111011000001111111' : 'Q',
  '111111111111111111111111111111111111' : 'Z',
}

transitions = []
# Filter out extraneous end states and add in the start state of 4
for record in records.values() :
  delete = record['delete']
  transition = ['D']
  for entry in delete :
    state = state_map[entry['bit_vector']]
    if (state == 'B') or (state == 'D') :
      transition.append(transition[-1])
    elif (state == 'Z') and (transition[-1] == 'Z') :
      continue
    else :
      transition.append(state)
  transitions.append(transition)

state_count = dict() # stores the count of each state
edge_count = dict() # stores the count of each edge
end_count = dict() # stores the count of each end state
for transition in transitions :
  # Count states
  for state in transition :
    if state not in state_count.keys() :
      state_count[state] = 1
    else :
      state_count[state] += 1
  # Count edges
  for i in xrange(len(transition) - 1) :
    edge = transition[i] + transition[i+1]
    if edge not in edge_count.keys() :
      edge_count[edge] = 1
    else :
      edge_count[edge] += 1
  # Count end states
  end_state = transition[-1]
  if end_state not in end_count.keys() :
    end_count[end_state] = 1
  else :
    end_count[end_state] += 1

# Print each state with its count
print 'States : '
for k in sorted(state_count.keys()) :
  print k + ' : ' + str(state_count[k])
print ''

# Print each edge with its count
print 'Edges : '
for k in sorted(edge_count.keys()) :
  print k + ' : ' + str(edge_count[k])
print ''

print 'End states : '
# Print the start states
for s in end_count :
  print s + ' : ' + str(end_count[s])
print ''
